"use strict";var ApplicationConfiguration=function(){return{applicationModuleName:"iris",applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule:function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module("iris").requires.push(moduleName)}}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role))return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("data"),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html",data:{roles:["admin"]}}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("ConfirmController",["$scope","$modalInstance","data","t",function($scope,$modalInstance,data,t){$scope.t=t,$scope.confirmText=data.confirmText,$scope.confirmTitle=data.confirmTitle,$scope.confirmValue=data.confirmValue,$scope.state={value:1},$scope.ok=function(){$modalInstance.close($scope.state.value)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus","t",function($scope,$state,Authentication,Menus,t){$scope.t=t,$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$q","Authentication","Goods","Orders","t",function($scope,$q,Authentication,Goods,Orders,t){$scope.t=t,$scope.authentication=Authentication;var goodsData=Goods.query(),ordersData=Orders.query();$q.all([goodsData.$promise,ordersData.$promise]).then(function(){$scope.tabs=[{icon:"shopping-cart",title:$scope.t.ORDERS_LIST,state:"orders.list",actionTitle:$scope.t.ADD,actionState:"orders.create",actionIcon:"plus",count:ordersData.count},{icon:"apple",title:t.GOODS,state:"goods.list",actionTitle:t.ADD,actionState:"goods.create",actionIcon:"plus",count:goodsData.length}]})}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),!(inputName=$interpolate(inputNgEl.attr("name")||"")(scope)))throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("ConfirmService",["$modal",function($modal){return{showValue:function(data,confirm,decline){var title=data.title,text=data.text,value=data.value;$modal.open({animation:!0,templateUrl:"modules/core/client/views/confirm.client.view.html",controller:"ConfirmController",resolve:{data:{confirmText:text,confirmTitle:title,confirmValue:value}}}).result.then(function(is){confirm&&is&&confirm(is)},function(){decline&&decline()})},show:function(title,text,confirm,decline){this.showValue({title:title,text:text},confirm,decline)}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||void 0===options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||void 0===options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").factory("t",[function(){return{ERR:"Помилка",UAH:"₴",MENU_ADMIN:"Адмініcтрування",MENU_ENTER:"Вхід",MENU_EDIT_PROFILE:"Редагування профілю",MENU_CHANGE_PWD:"Змінити пароль",MENU_EXIT:"Вихід",MENU_GOODS:"Товари",MENU_PLACES:"Місця",MENU_ORDERS:"Замовлення",ENTER_COUNT:"Введіть кількість",GOOD_EDIT:"Редагувати товар",GOOD_NEW:"Створити товар",GOOD_ADD:"Додати товар",GOOD_ENTER_COUNT:"Введіть кількість:",ORDER_TYPE_NEW:"Нові",ORDER_TYPE_PAYED:"Оплачені",ORDER_TYPE_ALL:"Всі",ORDER_STATUS_NEW:"Нові",ORDER_STATUS_READY:"Готові",ORDER_STATUS_TOGO:"Можно збирати",ORDER_STATUS_DONE:"Зібрані",OK:"Так",CANCEL:"Відміна",CONFIRM:"Підтвердження",REMOVE_ORDER_CONF:"Видалити дане замовлення?",PAY_ORDER_CONF:"Оплатити дане замовлення?",EDIT_ORDER_NUM:"Редагувати замовлення #",NEW_ORDER:"Нове замовлення",EDIT_MANUALLY:"Ввести вручну",EDIT_PLACE:"Редагування місця видачі",NEW_PLACE:"Нове місце видачі",NAME:"Назва",P_NAME:"Ім'я",REQUIRED:"обов'язково.",DESC:"Деталі",PRICE:"Ціна",COUNT:"Кількість",TYPE:"Тип",SAVE:"Зберегти",GOODS:"Товари",ORDERS:"Списки",ORDERS_LIST:"Замовлення",SEARCH:"Пошук",LINK_TO_ORDER:"Посилання на замовлення",CLIENT_SELECT_CREATE:"Клієнт (створити нового якщо не вибрано)",STATUS:"Статус",SELECT_NAME:"Введіть ім'я або виберіть зі списку",SELECT_PLACE:"Введіть місце або виберіть зі списку",SURNAME:"Прізвище",PHONE:"Телефон",PLACE_DELIVER:"Місце видачі",ADDRESS:"Адреса",LEFT:"Залишок",TOTAL:"Сума",SALE:"Знижка",DEBT:"Борг",TO_PAY:"Оплатити",TOTAL_PRICE:"Загальна сума:",ORDER_TYPES:"Типи замовлень",ORDER_STATUS:"Статус замовлень",ORDER_NUM:"Замовлення #",CLIENT_LAB:"Клієнт: ",IS_PAYED:"Оплачений",IS_NOT_PAYED:"Не оплачений",GOODS_LIST:"Список товарів:",GOOD:"Товар",TOTAL_PAY:"Сума до сплати: ",ADDITIONAL:"Додатково %",ADD:"Додати",CREATED:"Створений",ENTER_KEY_FOR_SEARCH:"Введіть ключ для пошуку",AUTH:"Авторизація",LOGIN:"Логін",PASS:"Пароль",P_FIRST:"<<",P_LAST:">>",P_PREV:"<",P_NEXT:">"}}]),angular.module("data").run(["Menus","t",function(Menus,t){Menus.addMenuItem("topbar",{title:t.MENU_GOODS,state:"goods.list",roles:["user"]})}]),angular.module("data").config(["$stateProvider",function($stateProvider){$stateProvider.state("goods",{abstract:!0,url:"/goods",template:"<ui-view/>"}).state("goods.list",{url:"",templateUrl:"modules/data/client/views/goods/list.client.view.html",data:{roles:["user"]}}).state("goods.create",{url:"/create",templateUrl:"modules/data/client/views/goods/edit.client.view.html",data:{roles:["admin"]}}).state("goods.edit",{url:"/:goodId/edit",templateUrl:"modules/data/client/views/goods/edit.client.view.html",data:{roles:["admin"]}})}]),angular.module("data").run(["Menus","t",function(Menus,t){Menus.addMenuItem("topbar",{title:t.MENU_ORDERS,state:"orders.list",roles:["admin"]})}]),angular.module("data").config(["$stateProvider",function($stateProvider){$stateProvider.state("orders",{abstract:!0,url:"/orders",template:"<ui-view/>"}).state("orders.list",{url:"",templateUrl:"modules/data/client/views/orders/list.client.view.html",data:{roles:["user"]}}).state("orders.create",{url:"/create",templateUrl:"modules/data/client/views/orders/edit.client.view.html",data:{roles:["user"]}}).state("orders.view",{url:"/:orderId",templateUrl:"modules/data/client/views/orders/view.client.view.html"}).state("orders.edit",{url:"/:orderId/edit",templateUrl:"modules/data/client/views/orders/edit.client.view.html",data:{roles:["user"]}})}]),angular.module("data").run(["Menus","t",function(Menus,t){Menus.addMenuItem("topbar",{title:t.MENU_PLACES,state:"places.list",roles:["admin"]})}]),angular.module("data").config(["$stateProvider",function($stateProvider){$stateProvider.state("places",{abstract:!0,url:"/places",template:"<ui-view/>"}).state("places.list",{url:"",templateUrl:"modules/data/client/views/places/list.client.view.html",data:{roles:["admin"]}}).state("places.create",{url:"/create",templateUrl:"modules/data/client/views/places/edit.client.view.html",data:{roles:["admin"]}}).state("places.edit",{url:"/:placeId/edit",templateUrl:"modules/data/client/views/places/edit.client.view.html",data:{roles:["admin"]}})}]),angular.module("data").controller("GoodsController",["$scope","$stateParams","$location","Authentication","Goods","ConfirmService","t",function($scope,$stateParams,$location,Authentication,Goods,Confirm,t){$scope.t=t,$scope.authentication=Authentication,$scope.remove=function(good){if(good){good.$remove();for(var i in $scope.goods)$scope.goods[i]===good&&$scope.goods.splice(i,1)}else $scope.good.$remove(function(){$location.path("goods")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var good=$scope.good;good._id?good.$update(function(){$location.path("goods")},function(errorResponse){$scope.error=errorResponse.data.message}):good.$save(function(){$location.path("goods")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){Goods.query(function(data){$scope.goods=data,$scope.buildPager()})},$scope.findOne=function(){$stateParams.goodId?($scope.good=Goods.get({goodId:$stateParams.goodId}),$scope.title=$scope.t.GOOD_EDIT):($scope.good=new Goods({price:1,count:0}),$scope.title=$scope.t.GOOD_NEW)},$scope.cancel=function(){$location.path("goods")},$scope.add=function(good){Confirm.showValue({title:$scope.t.GOOD_ADD,text:$scope.t.GOOD_ENTER_COUNT,value:!0},function(count){good.count+=count,good.$update()})},$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=_.filter($scope.goods,function(good){if(!$scope.search)return!0;var fields=["code","name","details","country","type"];return _.some(fields,function(field){var value=_.get(good,field);return value&&-1!==value.toString().toLowerCase().indexOf($scope.search.toLowerCase())})}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("data").controller("OrdersController",["$scope","$stateParams","$location","Authentication","Orders","Goods","Clients","Places","ConfirmService","t",function($scope,$stateParams,$location,Authentication,Orders,Goods,Clients,Places,Confirm,t){$scope.t=t,$scope.authentication=Authentication,$scope.currency=" "+$scope.t.UAH,$scope.currentPage=1;var toZero=function(val){return Math.max(0,val)};$scope.orderTypes=[{name:$scope.t.ORDER_TYPE_NEW,payed:!1,active:!0},{name:$scope.t.ORDER_TYPE_PAYED,payed:!0,active:!1},{name:$scope.t.ORDER_TYPE_ALL,payed:void 0,active:!1}],$scope.statuses=[{name:$scope.t.ORDER_STATUS_NEW,value:"work"},{name:$scope.t.ORDER_STATUS_READY,value:"ready"},{name:$scope.t.ORDER_STATUS_TOGO,value:"togo"},{name:$scope.t.ORDER_STATUS_DONE,value:"done"}],$scope.listStatuses=$scope.statuses.concat({name:$scope.t.ORDER_TYPE_ALL}),$scope.updateList=function(){var place=$scope.selectedPlace?$scope.selectedPlace._id:void 0,status=$scope.selectedStatus?$scope.selectedStatus.value:void 0;Orders.query({payed:$scope.selectedType.payed,place:place,status:status,page:$scope.currentPage,limit:$scope.itemsPerPage,q:$scope.search},function(data){$scope.orders=data.orders,$scope.ordersCount=data.count,$scope.buildPager()})},$scope.changeType=function(type){$scope.selectedType&&($scope.selectedType.active=!1),$scope.selectedType=type,$scope.selectedType.active=!0,$scope.updateList()},$scope.$watch("selectedPlace",function(){$scope.selectedType&&$scope.selectedPlace&&$scope.orders.$resolved&&$scope.changeType($scope.selectedType)}),$scope.$watch("selectedStatus",function(){$scope.selectedType&&$scope.selectedStatus&&$scope.orders.$resolved&&$scope.changeType($scope.selectedType)}),$scope.$watch("search",function(){$scope.updateList()}),$scope.remove=function(order){order?Confirm.show($scope.t.CONFIRM,$scope.t.REMOVE_ORDER_CONF,function(){order.$remove();for(var i in $scope.orders)$scope.orders[i]===order&&$scope.orders.splice(i,1);$scope.buildPager()}):$scope.order.$remove(function(){$location.path("orders")})},$scope.update=function(isValid,useOrder,callback){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","orderForm"),!1;var order=useOrder||$scope.order;order.total=$scope.calculateTotal(order),order._id?order.$update(function(){$location.path("orders"),callback&&callback()},function(errorResponse){$scope.error=errorResponse.data.message}):order.$save(function(){$location.path("orders"),callback&&callback()},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.pay=function(isValid,order,update){Confirm.show($scope.t.CONFIRM,$scope.t.PAY_ORDER_CONF,function(){order._id?(order.payed=!0,$scope.update(isValid,order,function(){update&&$scope.changeType($scope.selectedType)})):Orders.get({orderId:order},function(data){data.payed=!0,$scope.update(isValid,data,function(){update&&$scope.changeType($scope.selectedType)})})})},$scope.find=function(){$scope.changeType($scope.orderTypes[0]),Places.query(function(data){$scope.places=data,$scope.places.unshift({name:"Всі"}),$scope.selectedStatus=$scope.listStatuses[4],$scope.selectedPlace=$scope.places[0]})};var calcArray=function(good){if(!$scope.goods)return[];var items=[];return good&&good._id&&items.push(good),$scope.goods.forEach(function(g){_.find($scope.order.items,function(item){return item.good&&item.good._id===g._id})||g.count&&items.push(g)}),items};$scope.findOne=function(){$stateParams.orderId?Orders.get({orderId:$stateParams.orderId},function(data){$scope.order=data,$scope.calcArray=calcArray,$scope.savedOrder=_.cloneDeep(data),$scope.title=$scope.t.EDIT_ORDER_NUM+data.code,$scope.order.link="https://vitaly.herokuapp.com/orders/"+data._id,$scope.order.status||($scope.order.status=$scope.statuses[0].value)}):($scope.order=new Orders,$scope.title=$scope.t.NEW_ORDER,$scope.order.status=$scope.statuses[0].value,$scope.calcArray=calcArray),$scope.goods=Goods.query(),Clients.query(function(data){$scope.clients=data}),Places.query(function(data){$scope.places=data,$scope.places.unshift({name:$scope.t.EDIT_MANUALLY})})},$scope.calculate=function(price,count){return isNaN(price)||isNaN(count)?0+$scope.currency:(price*count).toFixed(2)+$scope.currency},$scope.addItem=function(){var defaultItem={count:1};$scope.order.items||($scope.order.items=[]),$scope.order.items.push(defaultItem)},$scope.calculateTotal=function(order){if(order&&order.items){for(var total=0,i=0;i<order.items.length;i++){var item=order.items[i];item.good&&item.good.price&&item.count&&(total+=item.good.price*item.count)}order.sale&&(total-=order.sale),order.credit&&(total+=order.credit);var totalPrice=Math.max(0,total);return order.extra?(totalPrice*(1+order.extra/100)).toFixed(2):totalPrice.toFixed(2)}},$scope.calculateLeft=function(good){var items=$scope.order.items;if(good&&items&&good._id){var item=_.find(items,function(i){return!(!i.good||!good)&&i.good._id===good._id}),savedItem=$scope.savedOrder?_.find($scope.savedOrder.items,function(i){return!(!i.good||!good)&&good._id===i.good._id}):null;if(!item)return savedItem?good.count+savedItem.count:good.count;var newItemCount=good.count-item.count;return toZero(savedItem?savedItem.count+newItemCount:newItemCount)}},$scope.cancel=function(){$location.path("orders")},$scope.removeItem=function(item){for(var i in $scope.order.items)$scope.order.items[i]===item&&$scope.order.items.splice(i,1)},$scope.disableSave=function(){if(!$scope.order||!$scope.order.items||!$scope.order.items.length)return!0;var disable=!1,findSelectedOrder=function(item){return function(i){return!(!i.good||!item.good)&&i.good._id===item.good._id}};return $scope.order.items.forEach(function(item){var saved=$scope.savedOrder?_.find($scope.savedOrder.items,findSelectedOrder(item)):void 0;(!item.count||0===item.count||!item.good||!item.good._id||item.count>item.good.count&&!saved||saved&&item.count-saved.count>item.good.count)&&(disable=!0)}),disable},$scope.buildPager=function(){$scope.itemsPerPage=20,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.pagedItems=$scope.orders},$scope.pageChanged=function(){$scope.changeType($scope.selectedType),$scope.figureOutItemsToDisplay()}}]),angular.module("data").controller("PlacesController",["$scope","$stateParams","$location","Authentication","Places","t",function($scope,$stateParams,$location,Authentication,Places,t){$scope.t=t,$scope.authentication=Authentication,$scope.remove=function(place){if(place){place.$remove();for(var i in $scope.places)$scope.places[i]===place&&$scope.places.splice(i,1)}else $scope.place.$remove(function(){$location.path("goods")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","articleForm"),!1;var place=$scope.place;$scope.place._id?place.$update(function(){$location.path("places")},function(errorResponse){$scope.error=errorResponse.data.message}):place.$save(function(){$location.path("places")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.places=Places.query()},$scope.findOne=function(){$stateParams.placeId?($scope.place=Places.get({placeId:$stateParams.placeId}),$scope.title=$scope.t.EDIT_PLACE):($scope.place=new Places,$scope.title=$scope.t.NEW_PLACE)},$scope.cancel=function(){$location.path("places")}}]),angular.module("data").factory("Clients",["$resource",function($resource){return $resource("api/clients/:clientId",{clientId:"@_id"},{update:{method:"PUT"}})}]),angular.module("data").factory("Goods",["$resource",function($resource){return $resource("api/goods/:goodId",{goodId:"@_id"},{update:{method:"PUT"}})}]),angular.module("data").factory("Orders",["$resource",function($resource){return $resource("api/orders/:orderId",{orderId:"@_id"},{update:{method:"PUT"},query:{method:"GET",isArray:!1}})}]),angular.module("data").factory("Places",["$resource",function($resource){return $resource("api/places/:placeId",{placeId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator","t",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator,t){$scope.t=t,$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signin=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1;$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1;$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","passwordForm"),!1;$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){
$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf("|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|")}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;new Users($scope.user).$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){return scope.passwordVerify===password})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){return{user:$window.user}}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){return owaspPasswordStrengthTest.test(password)},getPopoverMsg:function(){return"Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters."}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);